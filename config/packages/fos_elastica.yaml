fos_elastica:
  clients:
    default: { url: '%env(ELASTICSEARCH_URL)%' }
  indexes:
    magazines:
      properties:
        id: ~
        name: ~
        title: ~
        description: ~
        rules: ~
        createdAt: ~
        visibility: ~
        cover:
          type: "object"
          properties:
            id: ~
            filePath: ~
      persistence:
        driver: orm
        model: App\Entity\Magazine
        listener: '%elastica_listener%'
    entries:
      settings:
        index:
          analysis:
            filter:
              tag_filter:
                type: word_delimiter
                type_table: [ "# => ALPHA", "@ => ALPHA" ]
            analyzer:
              tag_analyzer:
                type: custom
                tokenizer: whitespace
                filter: ["lowercase", "tag_filter"]
      properties:
        id: ~
        title: ~
        url: ~
        body: { analyzer: tag_analyzer }
        type: ~
        ranking: ~
        score: ~
        isAdult: ~
        sticky: ~
        createdAt: ~
        lastActive: ~
        visibility: ~
        magazine:
          type: "object"
          properties:
            name: ~
        domain:
          type: "object"
          properties:
            id: ~
            name: ~
        user:
          type: "object"
          properties:
            username: ~
        image:
          type: "object"
          properties:
            id: ~
            filePath: ~
      persistence:
        driver: orm
        model: App\Entity\Entry
        listener: '%elastica_listener%'
    entry_comments:
      settings:
        index:
          analysis:
            filter:
              tag_filter:
                type: word_delimiter
                type_table: [ "# => ALPHA", "@ => ALPHA" ]
            analyzer:
              tag_analyzer:
                type: custom
                tokenizer: whitespace
                filter: [ "lowercase", "tag_filter" ]
      properties:
        id: ~
        body: { analyzer: tag_analyzer }
        createdAt: ~
        lastActive: ~
        visibility: ~
        magazine:
          type: "object"
          properties:
            name: ~
        entry:
          type: "object"
          properties:
            id: ~
        user:
          type: "object"
          properties:
            username: ~
        image:
          type: "object"
          properties:
            id: ~
            filePath: ~
      persistence:
        driver: orm
        model: App\Entity\EntryComment
        listener: '%elastica_listener%'
    posts:
      settings:
        index:
          analysis:
            filter:
              tag_filter:
                type: word_delimiter
                type_table: [ "# => ALPHA", "@ => ALPHA" ]
            analyzer:
              tag_analyzer:
                type: custom
                tokenizer: whitespace
                filter: [ "lowercase", "tag_filter" ]
      properties:
        id: ~
        body: { analyzer: tag_analyzer }
        ranking: ~
        score: ~
        isAdult: ~
        createdAt: ~
        lastActive: ~
        visibility: ~
        magazine:
          type: "object"
          properties:
            name: ~
        user:
          type: "object"
          properties:
            username: ~
        image:
          type: "object"
          properties:
            id: ~
            filePath: ~
      persistence:
        driver: orm
        model: App\Entity\Post
        listener: '%elastica_listener%'
    post_comments:
      settings:
        index:
          analysis:
            filter:
              tag_filter:
                type: word_delimiter
                type_table: [ "# => ALPHA", "@ => ALPHA" ]
            analyzer:
              tag_analyzer:
                type: custom
                tokenizer: whitespace
                filter: [ "lowercase", "tag_filter" ]
      properties:
        id: ~
        body: { analyzer: tag_analyzer }
        createdAt: ~
        lastActive: ~
        visibility: ~
        magazine:
          type: "object"
          properties:
            name: ~
        post:
          type: "object"
          properties:
            id: ~
        user:
          type: "object"
          properties:
            username: ~
        image:
          type: "object"
          properties:
            id: ~
            filePath: ~
      persistence:
        driver: orm
        model: App\Entity\PostComment
        listener: '%elastica_listener%'
